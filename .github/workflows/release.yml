name: Build and Release Rust Project

on:
  workflow_dispatch:
    inputs:
      release_name:
        description: 'Name of the release (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

jobs:
  build:
    name: Build and Upload Artifacts
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        target: [ x86_64-unknown-linux-gnu, x86_64-apple-darwin, x86_64-pc-windows-msvc ]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: windows-latest
            target: x86_64-pc-windows-msvc

    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Install Rust
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      # Install required target (for cross-compilation, if needed)
      - name: Install target
        if: matrix.os == 'ubuntu-latest'
        run: rustup target add ${{ matrix.target }}

      # Build the binary
      - name: Build
        run: |
          cargo build --release --target ${{ matrix.target }}

      # Prepare artifact for release
      - name: Prepare artifact
        run: |
          mkdir -p artifacts
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            cp target/${{ matrix.target }}/release/*.exe artifacts/${{ matrix.target }}.exe
          else
            cp target/${{ matrix.target }}/release/* artifacts/${{ matrix.target }}
          fi

      # Upload artifacts
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.target }}
          path: artifacts/

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest

    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Create GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.event.inputs.release_name }}
          release_name: ${{ github.event.inputs.release_name }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Upload release artifacts to GitHub release
      - name: Upload Release Assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            **/artifacts/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
