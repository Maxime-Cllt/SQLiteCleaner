name: Rust CI/CD Pipeline

on:
  push:
    branches:
      - gha_cd

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the code from the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Install Rust using `rustup`
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable # Use the stable version of Rust
          override: true

      # Step 3: Cache Cargo dependencies
      - name: Cache Cargo registry and build
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      # Step 4: Build the project
      - name: Build project
        run: cargo build --release

  release:
    needs: [ build ]
    runs-on: ubuntu-latest
    steps:

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: build-ubuntu-latest
          path: ubuntu

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: build-macos-latest
          path: macos

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: build-windows-latest
          path: windows

      - name: Renamer
        run: |
          mv ubuntu/SqLiteCleaner SqliteCleaner_ubuntu
            mv macos/SqLiteCleaner SqliteCleaner_macos
            mv windows/SqLiteCleaner.exe SqliteCleaner_windows.exe

      - name: Creating release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.inputs.dbms_cleaner }}
          name: ${{ github.event.inputs.dbms_cleaner }}
          draft: false
          prerelease: false
          files: |
            SqliteCleaner_ubuntu
            SqliteCleaner_macos
            SqliteCleaner_windows.exe

          token: ${{ secrets.GITHUB_TOKEN }}
