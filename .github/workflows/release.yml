name: "Build & Release"

permissions:
  contents: write  # Required to upload files to GitHub Releases

on:
  workflow_dispatch:
    inputs:
      version:
        type: string
        description: "Version: (e.g. -> v3.1.4-alpha+159)"
      release_type:
        type: choice
        default: none
        options:
          - none
          - patch
          - minor
          - major
        description: "Release type: none, patch, minor, major"
      publish:
        type: boolean
        description: "Publish release"
      overwrite_tag:
        type: boolean
        description: "Overwrite tag if it exists"

jobs:
  validate-input:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Validate input
        id: regex-match
        run: |
          text="${{ github.event.inputs.version }}";
          echo "match=true" >> "$GITHUB_OUTPUT";

  get-version:
    needs: validate-input
    runs-on: ubuntu-latest
    steps:
      - name: Fetch Repository
        uses: actions/checkout@v4

      - name: Install cargo-bump
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-bump

      - name: Versions using None
        id: none_version
        if: ${{ github.event.inputs.version == '' && github.event.inputs.release_type == 'none' }}
        run: |
          version=$(cargo metadata --format-version=1 --no-deps | jq -r '.packages[0].version');
          echo "crate_version=$version" >> "$GITHUB_OUTPUT";
          echo "tag_version=v$version" >> "$GITHUB_OUTPUT";

      - name: Versions using release_type
        id: new_version
        if: ${{ github.event.inputs.version == '' && github.event.inputs.release_type != 'none' }}
        run: |
          cargo bump ${{ github.event.inputs.release_type }};
          version=$(cargo metadata --format-version=1 --no-deps | jq -r '.packages[0].version');
          echo "crate_version=$version" >> "$GITHUB_OUTPUT";
          echo "tag_version=v$version" >> "$GITHUB_OUTPUT";

      - name: Versions using tag
        id: full_version
        if: ${{ github.event.inputs.version != '' }}
        run: |
          tag=${{ github.event.inputs.version }};
          echo "crate_version=${tag#v}" >> "$GITHUB_OUTPUT";
          echo "tag_version=$tag" >> "$GITHUB_OUTPUT";

    outputs:
      new_tag_version: ${{ steps.full_version.outputs.tag_version || steps.new_version.outputs.tag_version || steps.none_version.outputs.tag_version }}
      new_crate_version: ${{ steps.full_version.outputs.crate_version || steps.new_version.outputs.crate_version || steps.none_version.outputs.crate_version }}

  create-tag:
    needs: get-version
    runs-on: ubuntu-latest
    steps:
      - name: Fetch Repository
        uses: actions/checkout@v4

      - run: git pull

      - uses: mukunku/tag-exists-action@v1.6.0
        id: check-tag
        with:
          tag: ${{ needs.get-version.outputs.new_tag_version }}

      - name: Delete existing tag
        if: ${{ steps.check-tag.outputs.exists == 'true' && github.event.inputs.overwrite_tag }}
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git tag -d ${{ needs.get-version.outputs.new_tag_version }}
          git push origin :refs/tags/${{ needs.get-version.outputs.new_tag_version }}

      - name: Create new tag
        if: ${{ steps.check-tag.outputs.exists == 'false' || github.event.inputs.overwrite_tag }}
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git tag ${{ needs.get-version.outputs.new_tag_version }}
          git push origin ${{ needs.get-version.outputs.new_tag_version }}

  create-release:
    needs: [get-version, create-tag]
    runs-on: ubuntu-latest
    steps:
      - name: Fetch Repository
        uses: actions/checkout@v4

      - name: Create GitHub Release
        id: create_release
        uses: taiki-e/create-gh-release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          changelog: CHANGELOG.md
          allow-missing-changelog: true
          ref: refs/tags/${{ needs.get-version.outputs.new_tag_version }}

      - name: Save upload_url to artifact
        run: |
          echo "${{ steps.create_release.outputs.upload_url }}" > upload_url.txt
        uses: actions/upload-artifact@v3
        with:
          name: upload_url
          path: upload_url.txt

  build-and-release:
    needs: [get-version, create-release]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - { os: ubuntu-latest, target: x86_64-unknown-linux-gnu }
          - { os: macos-latest, target: x86_64-apple-darwin }
          - { os: macos-latest, target: aarch64-apple-darwin }
    steps:
      - name: Fetch Repository
        uses: actions/checkout@v4

      - name: Install dependencies (Ubuntu)
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y sqlite3 libsqlite3-dev

      - name: Install dependencies (macOS)
        if: ${{ matrix.os == 'macos-latest' }}
        run: |
          brew update
          brew install sqlite3

      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          target: ${{ matrix.target }}

      - name: Build the binary
        run: |
          cargo build --release --target ${{ matrix.target }}

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: SqliteCleaner-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/SqliteCleaner

  upload-artifacts:
    needs: [build-and-release, create-release]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - { target: x86_64-unknown-linux-gnu }
          - { target: x86_64-apple-darwin }
          - { target: aarch64-apple-darwin }
    steps:
      - name: Fetch Repository
        uses: actions/checkout@v4

      - name: Download upload_url artifact
        uses: actions/download-artifact@v3
        with:
          name: upload_url

      - name: Read upload_url
        id: read_upload_url
        run: |
          upload_url=$(cat upload_url.txt)
          echo "upload_url=${upload_url}" >> $GITHUB_ENV

      - name: Download release binary
        uses: actions/download-artifact@v3
        with:
          name: SqliteCleaner-${{ matrix.target }}

      - name: Upload binary to GitHub Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ env.upload_url }}
          asset_path: target/${{ matrix.target }}/release/SqliteCleaner
          asset_name: SqliteCleaner-${{ matrix.target }}
          asset_content_type: application/octet-stream