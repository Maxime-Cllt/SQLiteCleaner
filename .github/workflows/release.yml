name: Rust CI/CD Pipeline

on:
  push:
    branches:
        - gha_cd

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the code from the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Install Rust using `rustup`
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable # Use the stable version of Rust
          override: true

      # Step 3: Cache Cargo dependencies
      - name: Cache Cargo registry and build
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      # Step 4: Build the project
      - name: Build project
        run: cargo build --release

      # Step 5: Run tests
      - name: Run tests
        run: cargo test --verbose

  deploy:
    runs-on: ubuntu-latest
    needs: build # Ensure the build job passes before deploying

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Rust (same as in the build step)
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      # Step 3: Deploy the built binary
      - name: Deploy binary
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
        run: |
          # Install rsync
          sudo apt-get update && sudo apt-get install -y rsync

          # Copy the built binary to the remote server
          rsync -avz -e "ssh -i /tmp/deploy_key" \
            target/release/my_rust_program \
            $REMOTE_USER@$REMOTE_HOST:/path/to/deploy/

          # Restart the service on the remote server (optional)
          ssh -i /tmp/deploy_key $REMOTE_USER@$REMOTE_HOST << EOF
          sudo systemctl restart my_rust_program.service
          EOF

      # Step 4: Verify deployment (optional)
      - name: Verify deployment
        run: echo "Deployment complete"
