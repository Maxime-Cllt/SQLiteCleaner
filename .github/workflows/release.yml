name: "Build & Release Workflow"

permissions:
  contents: write

on:
  push:
    branches:
      - release_gha
  workflow_dispatch:
    inputs:
      version:
        type: string
        description: "Version: (e.g. -> v1.0.0)"
      release_type:
        type: choice
        default: none
        options:
          - none
          - patch
          - minor
          - major
        description:
          "Release type: none, patch, minor, major"
      publish:
        type: boolean
        description: "Publish release"
      overwrite_tag:
        type: boolean
        description: "Overwrite tag if it exists"
  workflow_call:
    inputs:
      version:
        type: string
        description: "Version: (e.g. -> v1.0.0)"
      release_type:
        type: string
      publish:
        type: boolean
      overwrite_tag:
        type: boolean

jobs:
  validate-input:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Validate input
        id: regex-match
        run: |
          text="${INPUT_VERSION}";
          echo "match=true" >> "$GITHUB_OUTPUT";

  get-version:
    needs: validate-input
    runs-on: ubuntu-latest
    steps:
      - name: Fetch Repository
        uses: actions/checkout@v4

      - name: Install jql
        if: ${{ !inputs.version }}
        uses: taiki-e/install-action@v2
        with:
          tool: jql

      - name: Install cargo-bump
        if: ${{ !inputs.version }}
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-bump

      - name: Versions using None
        id: none_version
        if: ${{ !inputs.version && inputs.release_type == 'none' }}
        run: |
          version=$(cargo metadata --format-version=1 --no-deps | jql '"packages"|>"version"<|[0]' --raw-string);
          echo $version;
          echo "crate_version=$version" >> "$GITHUB_OUTPUT";
          normal_version=v$version
          echo $normal_version;
          echo "tag_version=$normal_version" >> "$GITHUB_OUTPUT";

      - name: Versions using release_type
        id: new_version
        if: ${{ !inputs.version && inputs.release_type != 'none' }}
        run: |
          cargo bump ${{ inputs.release_type }};
          version=$(cargo metadata --format-version=1 --no-deps | jql '"packages"|>"version"<|[0]' --raw-string);
          echo $version;
          echo "crate_version=$version" >> "$GITHUB_OUTPUT";
          normal_version=v$version
          echo $normal_version;
          echo "tag_version=$normal_version" >> "$GITHUB_OUTPUT";

      - name: Versions using tag
        id: full_version
        if: inputs.version
        run: |
          tag=${{inputs.version}};
          echo $tag;
          echo "crate_version=${tag##v} >> GITHUB_OUTPUT";
          echo ${tag##v};

    outputs:
      new_tag_version: ${{ inputs.version || steps.new_version.outputs.tag_version || steps.none_version.outputs.tag_version }}
      new_crate_version: ${{ steps.full_version.outputs.crate_version || steps.new_version.outputs.crate_version || steps.none_version.outputs.crate_version }}


  create-tag:
    needs: [ get-version ]
    runs-on: ubuntu-latest
    steps:
      - name: Fetch Repository
        uses: actions/checkout@v4

      - run: git pull

      - uses: mukunku/tag-exists-action@v1.6.0
        if: ${{ inputs.overwrite_tag }}
        id: check-tag-overwrite
        with:
          tag: ${{  needs.get-version.outputs.new_tag_version }}

      - name: Delete tag
        if: ${{ steps.check-tag-overwrite.outputs.exists == 'true' }}
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git fetch --tags
          git tag -d ${{ needs.get-version.outputs.new_tag_version }}
          git push -d origin ${{  needs.get-version.outputs.new_tag_version }}

      - uses: mukunku/tag-exists-action@v1.6.0
        id: check-tag
        with:
          tag: ${{ needs.get-version.outputs.new_tag_version}}

      - name: Create tag
        if: steps.check-tag.outputs.exists == 'false'
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git tag ${{ needs.get-version.outputs.new_tag_version}}
          git push origin ${{  needs.get-version.outputs.new_tag_version}}

  create-release:
    needs: [ get-version, create-tag ]
    runs-on: ubuntu-latest
    steps:
      - name: Fetch Repository
        uses: actions/checkout@v4

      - uses: taiki-e/create-gh-release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          changelog: CHANGELOG.md
          allow-missing-changelog: true
          ref: refs/tags/${{ needs.get-version.outputs.new_tag_version }}

  build-and-release:
    needs: [ get-version, create-release ]
    name: Build & Release for ${{ matrix.target }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - { os: ubuntu-latest, target: x86_64-unknown-linux-gnu, cross: false }
    #          - { os: ubuntu-latest, target: x86_64-unknown-linux-musl, cross: true }
    #          - { os: ubuntu-latest, target: aarch64-unknown-linux-gnu, cross: true }
    #          - { os: ubuntu-latest, target: aarch64-unknown-linux-musl, cross: true }
    #          - { os: ubuntu-latest, target: riscv64gc-unknown-linux-gnu, cross: true }
    #
    #          - { os: windows-latest, target: x86_64-pc-windows-msvc, cross: false }
    #          - { os: windows-latest, target: aarch64-pc-windows-msvc, cross: false }
    #
    #          - { os: macos-latest, target: x86_64-apple-darwin, cross: false }
    #          - { os: macos-latest, target: aarch64-apple-darwin, cross: false }
    steps:
      - name: Fetch Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.get-version.outputs.new_tag_version }}

      - name: Install stable Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          target: ${{ matrix.target }}

      - name: Install cross-compilation tools (if needed)
        if: ${{ matrix.cross }}
        uses: taiki-e/setup-cross-toolchain-action@v1
        with:
          target: ${{ matrix.target }}

      - name: Build the binary
        run: |
          cargo build --release --target ${{ matrix.target }}

      - name: Upload release binary (Linux & macOS)
        if: ${{ matrix.os != 'windows-latest' }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ github.event.repository.name }}-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/SqliteCleaner

      - name: Echo uploaded binary path
        run: |
          echo ${{ github.event.repository.name }}-${{ matrix.target }}  + " uploaded"
  

  #      - name: Upload release binary (Linux & macOS)
  #        if: ${{ matrix.os == 'windows-latest' }}
  #        uses: actions/upload-artifact@v3
  #        with:
  #          name: ${{ github.event.repository.name }}-${{ matrix.target }}
  #          path: target/${{ matrix.target }}/release/SqliteCleaner.exe

  release:
    needs: [ build-and-release ]
    runs-on: ubuntu-latest
    steps:

      - name: Download artifact (Linux)
        uses: actions/download-artifact@v4
        with:
          name: SqliteCleaner-x86_64-unknown-linux-gnu
          path: target/x86_64-unknown-linux-gnu/release

      #      - name: Download artifact (Linux MUSL)
      #        uses: actions/download-artifact@v4
      #        with:
      #          name: SqliteCleaner-x86_64-unknown-linux-musl
      #          path: ubuntu
      #
      #      - name: Download artifact (macOS x86_64)
      #        uses: actions/download-artifact@v4
      #        with:
      #          name: SqliteCleaner-x86_64-apple-darwin
      #          path: macos
      #
      #      - name: Download artifact (macOS aarch64)
      #        uses: actions/download-artifact@v4
      #        with:
      #          name: SqliteCleaner-aarch64-apple-darwin
      #          path: macos
      #
      #      - name: Download artifact (Windows x86_64)
      #        uses: actions/download-artifact@v4
      #        with:
      #          name: SqliteCleaner-x86_64-pc-windows-msvc
      #          path: windows
      #
      #      - name: Download artifact (Windows aarch64)
      #        uses: actions/download-artifact@v4
      #        with:
      #          name: SqliteCleaner-aarch64-pc-windows-msvc
      #          path: windows

      #      - name: Rename artifacts
      #        run: |
      #          # Rename Linux artifacts
      #          mv target/x86_64-unknown-linux-gnu/release/SqliteCleaner SqliteCleaner-linux-x86_64-gnu

      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.get-version.outputs.new_tag_version }}
          name: ${{ needs.get-version.outputs.new_tag_version }}
          draft: false
          prerelease: false
          files: |
            SqliteCleaner-linux-x86_64-gnu
          #            SqliteCleaner-linux-x86_64-musl
          #            SqliteCleaner-macos-x86_64
          #            SqliteCleaner-macos-aarch64
          #            SqliteCleaner-windows-x86_64.exe
          #            SqliteCleaner-windows-aarch64.exe
          token: ${{ secrets.GITHUB_TOKEN }}