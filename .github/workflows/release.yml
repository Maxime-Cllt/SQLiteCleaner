name: "Build & Release Workflow"

on:
  push:
    tags:
      - 'v*'

jobs:

  build-darwin:
    name: Build for macOS
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [ x86_64-apple-darwin, aarch64-apple-darwin ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Rust build
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo
            target
          key: ${{ runner.os }}-${{ matrix.arch }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install Rust Stable
        uses: dtolnay/rust-toolchain@stable

      - name: Install dependencies
        run: rustup target add ${{ matrix.arch }}

      - name: Build for macOS ${{ matrix.arch }}
        run: cargo build --release --target ${{matrix.arch}}

      - name: Rename binary
        run: mv target/${{ matrix.arch }}/release/SQLiteCleaner target/${{ matrix.arch }}/release/SQLiteCleaner-${{ matrix.arch }}

      - name: Upload macOS artifact
        uses: actions/upload-artifact@v4
        with:
          name: macOS-app-${{ matrix.arch }}
          path: target/${{ matrix.arch }}/release/SQLiteCleaner-${{ matrix.arch }}

  build-windows:
    name: Build for Windows (x86 and ARM)
    runs-on: windows-latest
    strategy:
      matrix:
        arch: [ x86_64-pc-windows-msvc, aarch64-pc-windows-msvc ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Rust build
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo
            target
          key: ${{ runner.os }}-${{ matrix.arch }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install Rust Stable
        uses: dtolnay/rust-toolchain@stable

      - name: Install dependencies
        run: rustup target add ${{ matrix.arch }}

      - name: Build for Windows ${{ matrix.arch }}
        run: cargo build --release --target ${{matrix.arch}}

      - name: Rename binary
        run: mv target/${{ matrix.arch }}/release/SQLiteCleaner.exe target/${{ matrix.arch }}/release/SQLiteCleaner-${{ matrix.arch }}.exe

      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-app-${{ matrix.arch }}
          path: target/${{ matrix.arch }}/release/SQLiteCleaner-${{ matrix.arch }}.exe

  build-linux-x86-64:
    name: Build for Linux x86
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [x86_64-unknown-linux-gnu, aarch64-unknown-linux-musl, aarch64-unknown-linux-gnu, riscv64gc-unknown-linux-gnu ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Rust build
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo
            target
          key: ${{ runner.os }}-${{ matrix.arch }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install Rust Stable
        uses: dtolnay/rust-toolchain@stable

      - name: Install dependencies
        run: rustup target add ${{ matrix.arch }}

      - name: Build for Linux ${{ matrix.arch }}
        run: cargo build --release --target ${{ matrix.arch }}

      - name: Rename binary
        run: mv target/${{ matrix.arch }}/release/SQLiteCleaner target/${{ matrix.arch }}/release/SQLiteCleaner-${{ matrix.arch }}

      - name: Upload Linux artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-app-${{ matrix.arch }}
          path: target/${{ matrix.arch }}/release/SQLiteCleaner-${{ matrix.arch }}


  #  build-linux-aarch64:
  #    name: Build for Linux ARM
  #    runs-on: ubuntu-24.04-arm
  #    strategy:
  #      matrix:
  #        arch: [aarch64-unknown-linux-musl]
  #    steps:
  #      - name: Checkout code
  #        uses: actions/checkout@v4
  #
  #      - name: Cache Rust build
  #        uses: actions/cache@v3
  #        with:
  #          path: |
  #            ~/.cargo
  #            target
  #          key: ${{ runner.os }}-${{ matrix.arch }}-cargo-${{ hashFiles('**/Cargo.lock') }}
  #          restore-keys: |
  #            ${{ runner.os }}-cargo-
  #
  #      - name: Install Rust Stable
  #        uses: dtolnay/rust-toolchain@stable
  #
  #      - name: Install dependencies
  #        run: rustup target add ${{ matrix.arch }}
  #
  #      - name: Build for Linux ${{ matrix.arch }}
  #        run: cargo build --release --target ${{ matrix.arch }}
  #
  #      - name: Upload Linux artifact
  #        uses: actions/upload-artifact@v4
  #        with:
  #          name: linux-app-${{ matrix.arch }}
  #          path: target/${{ matrix.arch }}/release/SQLiteCleaner


  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [ build-darwin, build-windows, build-linux-x86-64,
      #             build-linux-aarch64
    ]
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: ./artifacts/**/*  # Upload all artifacts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}